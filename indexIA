<!DOCTYPE html>
<html>

<head>
    <base href="https://stefanini-group-evaluation.com/">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <title>Stefanini Group Evaluation</title>

    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }

        .card {
            background-color: #1e3a8a;
            color: white;
            border-radius: 15px;
            padding: 20px;
            width: 300px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            background-image: url('C:/Users/lglucena/OneDrive - Stefanini/Área de Trabalho/Outros/image/degrade.png');
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
        }

        .header {
            text-align: center;
            margin-bottom: 15px;
        }

        .logo {
            max-width: 150px;
            margin-bottom: 10px;
        }

        .gauge-container {
            position: relative;
            width: 100%;
            height: 170px;
            margin-bottom: 15px;
        }

        .gauge {
            width: 100%;
            height: 100%;
        }

        .info {
            margin-bottom: 15px;
            background-image: url('C:/Users/lglucena/OneDrive - Stefanini/Área de Trabalho/Outros/image/transparente.png');
            /* Substitua pelo caminho correto */
            background-size: cover;
            /* Ajusta o tamanho da imagem */
            background-position: center;
            /* Centraliza a imagem */
            background-repeat: no-repeat;
            /* Não repete a imagem */
            padding: 10px;
            /* Adiciona um espaçamento interno, se necessário */
            border-radius: 10px;
            /* Arredonda os cantos, se desejado */
        }

        .nameb {
            font-size: 1.2em;
            font-weight: bold;
            margin-bottom: 5px;
            text-align: center;
            color: black;
            /* Cor do texto */
        }

        .positionb {
            font-size: 0.9em;
            color: black;
            /* Cor do texto */
            text-align: center;
        }

        .name {
            font-size: 1.2em;
            font-weight: bold;
            margin-bottom: 5px;
            text-align: center;
        }

        .position {
            font-size: 0.9em;
            color: #bbb;
            text-align: center;
        }

        .ratings {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
        }

        .rating {
            text-align: center;
        }

        .stars {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 20px;
        }

        .star {
            width: 15px;
            height: 15px;
            margin: 0 1px;
        }

        .star-full {
            fill: gold;
        }

        .star-empty {
            fill: none;
            stroke: gold;
            stroke-width: 2px;
        }

        input[type="number"] {
            width: 50px;
            margin-top: 5px;
        }

        .history {
            margin-top: 15px;
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 10px;
            font-size: 1em;
            color: #ffffff;
            background-color: #2c5282;
            border-radius: 10px;
            padding: 10px;
        }

        .history-item {
            text-align: center;
        }

        .history-item span {
            display: block;
            font-weight: bold;
            padding: 5px;
            background-color: #1e3a8a;
            margin-top: 5px;
            border-radius: 5px;
            color: white;
        }

        .history-item .year {
            font-size: 0.9em;
            color: #bbb;
            cursor: text;
        }

        .date {
            font-size: 0.8em;
            color: #bbb;
            text-align: center;
            margin-top: 10px;
        }

        .container {
            display: flex;
        }

        .textarea-container {
            margin-top: 20px;
            /* Adiciona espaço acima do contêiner */
            background-color: #ffffff;
            border-radius: 15px;
            padding: 20px;
            width: 400px;
            margin-left: 50px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border: 1px solid #ccc;
        }

        input[type="number"] {
            width: 50px;
            margin-top: 5px;
            color: black;
            /* Adiciona esta linha para mudar a cor do texto */
        }
    </style>
</head>

<body>

    <div class="card">
        <div class="header">
            <img src="C:\Users\lglucena\OneDrive - Stefanini\Área de Trabalho\Outros\image\3.webp"
                alt="Stefanini Group logo" class="logo">
        </div>
        <div class="gauge-container">
            <svg class="gauge" viewBox="0 0 100 50" width="100%" height="100%">
                <image href="C:\Users\lglucena\OneDrive - Stefanini\Área de Trabalho\Outros\image\nota.png" width="100"
                    height="55" />
                <text x="50" y="47" text-anchor="middle" font-size="20" fill="white" id="gaugeText">8</text>
                <path id="arrow" d="M50,15 L55,25 L45,25 Z" fill="white" transform="rotate(0 50 45)" />
            </svg>
        </div>
        <div class="date" contenteditable="true">11-Jul-2024</div><br>

        <div class="info">
            <div class="nameb" contenteditable="true" name="cliente">BANCO DO BRASIL</div>
            <div class="positionb" contenteditable="true" name>Acessib. Digital e Experiência do Usuário</div>
            <div class="name" contenteditable="true">Carlos Eduardo de Lima Saugo</div>
            <div class="position" contenteditable="true">Gerente de Equipe</div>
        </div>
        <div class="ratings">
            <div class="rating">
                <div>Qualidade</div>
                <div class="stars" id="qualityStars"></div>
                <input type="number" id="qualityInput" min="0" max="5" value="4" onchange="updateStars('quality')">
            </div>
            <div class="rating">
                <div>Comunicação</div>
                <div class="stars" id="communicationStars"></div>
                <input type="number" id="communicationInput" min="0" max="5" value="4"
                    onchange="updateStars('communication')">
            </div>
            <div class="rating">
                <div>Gestão</div>
                <div class="stars" id="managementStars"></div>
                <input type="number" id="managementInput" min="0" max="5" value="4"
                    onchange="updateStars('management')">
            </div>
            <div class="rating">
                <div>Inovação</div>
                <div class="stars" id="innovationStars"></div>
                <input type="number" id="innovationInput" min="0" max="5" value="4"
                    onchange="updateStars('innovation')">
            </div>
            <div class="rating">
                <div>Parceria</div>
                <div class="stars" id="partnershipStars"></div>
                <input type="number" id="partnershipInput" min="0" max="5" value="4"
                    onchange="updateStars('partnership')">
            </div>
            <div class="rating">
                <div>Prazo</div>
                <div class="stars" id="deadlineStars"></div>
                <input type="number" id="deadlineInput" min="0" max="5" value="4" onchange="updateStars('deadline')">
            </div>
        </div>
        <canvas id="historyChart" width="300" height="150"></canvas>
        <div class="history">
            <div class="history-item">
                <div class="year" contenteditable="true">2001</div>
                <span contenteditable="true" name="ANO1">10</span>
            </div>
            <div class="history-item">
                <div class="year" contenteditable="true">2002</div>
                <span contenteditable="true" name="ANO2">10</span>
            </div>
            <div class="history-item">
                <div class="year" contenteditable="true">2003</div>
                <span contenteditable="true" name="ANO3">9</span>
            </div>
            <div class="history-item">
                <div class="year" contenteditable="true">2004</div>
                <span contenteditable="true" name="ANO4">3</span>
            </div>
            <div class="history-item">
                <div class="year" contenteditable="true">2005</div>
                <span contenteditable="true" name="ANO5">9</span>
            </div>
        </div>
        <!-- <div class="date" contenteditable="true">11-Jul-2024</div> -->
    </div>

    <div class="textarea-container">
        <textarea id="inputText" class="form-control" rows="5" style="width: 100%;"></textarea>
        <br>
        <button onclick="addRow()" class="btn btn-primary">Adicionar</button>
        <button onclick="toggleInputFields()" class="btn btn-warning">Ocultar Campos</button>

        <script>
            function toggleInputFields() {
                const inputs = [
                    document.getElementById('qualityInput'),
                    document.getElementById('communicationInput'),
                    document.getElementById('managementInput'),
                    document.getElementById('innovationInput'),
                    document.getElementById('partnershipInput'),
                    document.getElementById('deadlineInput')
                ];

                inputs.forEach(input => {
                    input.style.visibility = (input.style.visibility === 'hidden' ? 'visible' : 'hidden');
                    input.style.height = (input.style.visibility === 'hidden' ? '0' : 'auto'); // Controla a altura para evitar espaço desnecessário
                });
            }

        </script>

    </div>

    <script>
        function addRow() {
            processText(); // Chama a função processText quando o botão é clicado
        }

        async function fetchFromOpenAI(inputText) {
            try {
                const response = await fetch('https://api.openai.com/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer SUA CHAVE API OPENAI AQUI` // Substitua por sua chave da API
                    },
                    body: JSON.stringify({
                        model: "gpt-3.5-turbo",
                        messages: [
                            { role: "user", content: `Por favor, preencha os campos a seguir a partir do seguinte texto: "${inputText}". A estrutura do texto é: CLIENTE, CONTATO, CARGO, SERVIÇO, QUALIDADE, COMUNICAÇÃO, GESTÃO, INOVAÇÃO, PARCERIA, PRAZO, ANO1, ANO2, ANO3, ANO4, ANO5. **Mantenha a ordem original dos números de avaliação e não os altere.** Por exemplo, para o texto "USIMINAS Anderson Silva Almeida Coordenador de Operações e Infraestrutura 3 3 3 5 4 1 Outsourcing 8 9 10 9 8", o resultado esperado deve ser estruturado assim: CLIENTE: USIMINAS, CONTATO: Anderson Silva Almeida, CARGO: Coordenador de Operações e Infraestrutura, SERVIÇO: Outsourcing, QUALIDADE: 3, COMUNICAÇÃO: 3, GESTÃO: 3, INOVAÇÃO: 5, PARCERIA: 4, PRAZO: 1, ANO1: 8, ANO2: 9, ANO3: 10, ANO4: 9, ANO5: 8.` }
                        ]
                    })
                });

                if (!response.ok) {
                    throw new Error(`Error: ${response.status} - ${response.statusText}`);
                }

                const data = await response.json();
                return data.choices[0].message.content;
            } catch (error) {
                console.error('Erro ao chamar a API da OpenAI:', error);
                throw error;
            }
        }

        async function processText() {
            try {
                const inputText = document.getElementById('inputText').value.trim();

                if (!inputText) {
                    console.error('Input text is empty');
                    return;
                }

                const structuredData = await fetchFromOpenAI(inputText);
                console.log('Structured Data:', structuredData);

                // Agora vamos parsear a resposta esperada da IA
                const regex = /CLIENTE:\s*(.*),\s*CONTATO:\s*(.*),\s*CARGO:\s*(.*),\s*SERVIÇO:\s*(.*),\s*QUALIDADE:\s*(\d+),\s*COMUNICAÇÃO:\s*(\d+),\s*GESTÃO:\s*(\d+),\s*INOVAÇÃO:\s*(\d+),\s*PARCERIA:\s*(\d+),\s*PRAZO:\s*(\d+),\s*ANO1:\s*(\d+),\s*ANO2:\s*(\d+),\s*ANO3:\s*(\d+),\s*ANO4:\s*(\d+),\s*ANO5:\s*(\d+)/;
                const matches = structuredData.match(regex);

                if (matches) {
                    const cliente = matches[1].trim();
                    const contato = matches[2].trim();
                    const cargo = matches[3].trim();
                    const servico = matches[4].trim();
                    const qualidade = matches[5].trim();
                    const comunicacao = matches[6].trim();
                    const gestao = matches[7].trim();
                    const inovacao = matches[8].trim();
                    const parceria = matches[9].trim();
                    const prazo = matches[10].trim();
                    const ano1 = matches[11].trim();
                    const ano2 = matches[12].trim();
                    const ano3 = matches[13].trim();
                    const ano4 = matches[14].trim();
                    const ano5 = matches[15].trim();

                    // Preencher informações no card
                    document.querySelector('.nameb').textContent = cliente;
                    document.querySelector('.positionb').textContent = servico;
                    document.querySelector('.name').textContent = contato;
                    document.querySelector('.position').textContent = cargo;
                    document.getElementById('qualityInput').value = qualidade;
                    document.getElementById('communicationInput').value = comunicacao;
                    document.getElementById('managementInput').value = gestao;
                    document.getElementById('innovationInput').value = inovacao;
                    document.getElementById('partnershipInput').value = parceria
                    document.getElementById('deadlineInput').value = prazo;

                    // Preencher os anos no histórico
                    document.querySelector('span[name="ANO1"]').textContent = ano1;
                    document.querySelector('span[name="ANO2"]').textContent = ano2;
                    document.querySelector('span[name="ANO3"]').textContent = ano3;
                    document.querySelector('span[name="ANO4"]').textContent = ano4;
                    document.querySelector('span[name="ANO5"]').textContent = ano5;

                    // Atualizar estrelas e gauge após a mudança
                    updateStars('quality');
                    updateStars('communication');
                    updateStars('management');
                    updateStars('innovation');
                    updateStars('partnership');
                    updateStars('deadline');

                    // Atualizar gráfico
                    renderHistoryChart();
                } else {
                    console.error('Estrutura de dados inesperada:', structuredData);
                }
            } catch (error) {
                console.error('Erro ao processar texto:', error);
            }
        }


    </script>


    <script>
        const historyChartContext = document.getElementById('historyChart').getContext('2d');
        let historyChart;

        function createStarSVG(filled) {
            const starSVG = document.createElementNS("http://www.w3.org/2000/svg", "svg");
            starSVG.setAttribute("viewBox", "0 0 24 24");
            starSVG.classList.add("star");
            starSVG.classList.add(filled ? "star-full" : "star-empty");

            const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
            path.setAttribute("d", "M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z");
            starSVG.appendChild(path);

            return starSVG;
        }

        function updateStars(category) {
            const input = document.getElementById(`${category}Input`);
            const starsElement = document.getElementById(`${category}Stars`);
            const value = parseInt(input.value);

            starsElement.innerHTML = '';
            for (let i = 1; i <= 5; i++) {
                starsElement.appendChild(createStarSVG(i <= value));
            }

            updateGauge();
        }

        function updateGauge() {
            const historyItems = document.querySelectorAll('.history-item');
            let lastScore = 0;

            // Busca a última nota no histórico
            historyItems.forEach(item => {
                const score = parseInt(item.querySelector('span').textContent);
                if (!isNaN(score)) {
                    lastScore = score; // Armazena a última nota
                }
            });

            const gaugeText = document.getElementById('gaugeText');
            const arrow = document.getElementById('arrow');

            // Atualiza o texto do gauge com a última nota
            gaugeText.textContent = lastScore;

            // Normaliza o valor para o gauge
            const normalizedValue = (lastScore / 10) * 100; // Supondo que a nota máxima seja 10

            // Atualiza a rotação do ponteiro
            const rotation = -90 + (normalizedValue * 1.8); // -90 a 90 graus
            arrow.setAttribute('transform', `rotate(${rotation} 50 45)`);
        }

        function renderHistoryChart() {
            const years = [];
            const scores = [];

            const historyItems = document.querySelectorAll('.history-item');
            historyItems.forEach(item => {
                const year = item.querySelector('.year').textContent;
                const score = item.querySelector('span').textContent;
                years.push(year);
                scores.push(parseInt(score));
            });

            if (historyChart) {
                historyChart.destroy(); // Remove a instância anterior do gráfico
            }

            historyChart = new Chart(historyChartContext, {
                type: 'line',
                data: {
                    labels: years,
                    datasets: [{
                        label: 'Notas por Ano',
                        data: scores,
                        borderColor: 'rgba(75, 192, 192, 1)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderWidth: 2,
                        fill: true,
                        tension: 0.1,
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                color: 'white'
                            }
                        },
                        x: {
                            ticks: {
                                color: 'white'
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            labels: {
                                color: 'white'
                            }
                        }
                    }
                }
            });

            // Atualiza o gauge com a última nota do histórico
            updateGauge();
        }

        // Initialize stars and gauge
        document.querySelectorAll('.rating').forEach(rating => {
            const category = rating.querySelector('input').id.replace('Input', '');
            updateStars(category);
        });
        updateGauge();

        // Renderizar o gráfico de histórico
        renderHistoryChart();

        // Adicionar evento de input para atualizar o gráfico ao mudar as notas
        document.querySelectorAll('.history-item span').forEach(item => {
            item.addEventListener('input', renderHistoryChart);
        });

        document.querySelectorAll('.history-item .year').forEach(item => {
            item.addEventListener('input', renderHistoryChart);
        });
    </script>
</body>

</html>
